---
# Install system apt packages
- hosts: webservers
  become: yes
  tasks:
  - name: install packages
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - python3-pip
        - nginx
# Install the app, note: don't do these tasks with become sudo
- hosts: webservers
  become: yes
  tasks:
    - name: clone repo
      action: git repo={{repo_url}} dest=/home/{{ ansible_ssh_user }}/{{ app_name }} remote={{repo_remote}} version={{repo_version}} accept_hostkey=True
#    - name: clone repo
#      git:
#        repo: 'https://github.com/{{ github_user }}/{{ app_name }}.git'
#        dest: /home/{{ ansible_ssh_user }}/{{ app_name }}
#        update: yes  # Does a git pull if the repo already exists
    - name: Install virtualenv via pip
      pip:
        name: virtualenv
        executable: pip3

    - name: install modules in a virtualenv
      pip:
        requirements: /home/{{ ansible_ssh_user }}/{{ app_name }}/requirements.txt
        virtualenv: /home/{{ ansible_ssh_user }}/{{ app_name }}/env
        virtualenv_python: python3.6

# Configure app systemd service and nginx
- hosts: webservers
  become: yes
  tasks:
  - name: template systemd service config
    copy:
      src: .service
      dest: /etc/systemd/system/{{ app_name }}.service
  - name: start systemd app service
    systemd: name={{ app_name }}.service state=restarted enabled=yes
  - name: template nginx site config
    template:
      src: .nginx
      dest: /etc/nginx/sites-available/{{ app_name }}
  - name: remove default nginx site config
    file: path=/etc/nginx/sites-enabled/default state=absent
  #- command: mv /etc/nginx/sites-enabled/default /tmp/nginx.sites-enabled.default
  - name: enable nginx site
    file:
      src: /etc/nginx/sites-available/{{ app_name }}
      dest: /etc/nginx/sites-enabled/default
      state: link
      force: yes
  - name: restart nginx
    systemd: name=nginx state=restarted enabled=yes
  - name: open firewall for nginx
    ufw:
      rule: allow
      name: Nginx Full

# Run a quick test to verify the site is working
- hosts: webservers
  become: yes
  tasks:
  - name: get url
    get_url:
      url: http://{{inventory_hostname}}
      dest: /tmp/hello.html
  - name: read html
    shell: cat /tmp/hello.html
    register: html_contents
  - name: check for string in html
    when: html_contents.stdout.find('hello') != -1
    debug: msg="success!"
